//
//  FlickrPhotoPickerController.m
//  Photo Pool
//
//  Created by Michael Pulsifer on 7/5/10.
//  Copyright 2010 Mike Pulsifer. All rights reserved.
//

#import "FlickrPhotoPickerController.h"


@implementation FlickrPhotoPickerController

@synthesize photoArray;
@synthesize photoThumbArray;
@synthesize flickrRequest;
@synthesize context;
@synthesize plistDictionary;
@synthesize photoURL;
@synthesize photoData;
@synthesize activityView;
@synthesize perPageDict;
@synthesize perPageAsInt;
@synthesize groupPhotoList;

#pragma mark -
#pragma mark View lifecycle


- (void)viewDidLoad {
	//Group state
	sharedGroupState = [SingletonFlickrGroup sharedGroupStateInstance];

	// Read the flickr API Key and Shared Secret from flickr.plist
	
	loadingPhotos = YES;
	downloadCount = 0;
	
	NSString *path = [[NSBundle mainBundle] bundlePath];
	NSString *finalPath = [path stringByAppendingPathComponent:@"flickr.plist"];
	plistDictionary = [[NSDictionary dictionaryWithContentsOfFile:finalPath] retain];
	NSString *flickrKey = [plistDictionary objectForKey:@"flickr_key"];
	NSString *flickrSecret = [plistDictionary objectForKey:@"flickr_secret"];
	 
	context = [[OFFlickrAPIContext alloc] initWithAPIKey:flickrKey sharedSecret:flickrSecret];
	 
	flickrRequest = [[OFFlickrAPIRequest alloc] initWithAPIContext:context];
	
	// Grab the user defaults from the settings bundle
	NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
	//perPage = [defaults integerForKey:@"prefPhotoCount"]; 
	perPageAsInt = [defaults integerForKey:@"prefPhotoCount"];
	NSString *perPage = [[NSString alloc] initWithFormat:@"%d", perPageAsInt];
	NSLog(@"%@", perPage);
	NSLog(@"%@", [sharedGroupState groupPhotoCount]);
//	perPageDict = [[NSDictionary alloc] initWithObjectsAndKeys: perPage, @"perPage", perPageAsInt, @"perPageAsInt", nil ];
	
	// get a list of the most recent photos
	[flickrRequest setDelegate:self];
	NSLog(@"Sending getRecent request to flickr...!");
	
	
//	if ([sharedGroupState groupTag] != nil) {
	//	[flickrRequest callAPIMethodWithGET:@"flickr.groups.pools.getPhotos" arguments:[NSDictionary dictionaryWithObjectsAndKeys:[sharedGroupState groupID], @"group_id", [sharedGroupState groupTag], @"tags", perPage, @"per_page", nil]];
	//} else {
//		[flickrRequest callAPIMethodWithGET:@"flickr.groups.pools.getPhotos" arguments:[NSDictionary dictionaryWithObjectsAndKeys:[sharedGroupState groupID], @"group_id", perPage, @"per_page", nil]];
	//}
	
	if ([sharedGroupState searchContext] == 0) {
		[flickrRequest callAPIMethodWithGET:@"flickr.groups.pools.getPhotos" arguments:[NSDictionary dictionaryWithObjectsAndKeys:[sharedGroupState groupID], @"group_id", perPage, @"per_page", nil]];

	} else {
		[flickrRequest callAPIMethodWithGET:@"flickr.people.getPublicPhotos" arguments:[NSDictionary dictionaryWithObjectsAndKeys:[sharedGroupState groupID], @"user_id", perPage, @"per_page", nil]];

	}

	
	
	[super viewDidLoad];

    // Uncomment the following line to preserve selection between presentations.
    // self.clearsSelectionOnViewWillAppear = NO;
 
    // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
    // self.navigationItem.rightBarButtonItem = self.editButtonItem;
}


/*
- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
}
*/
/*
- (void)viewDidAppear:(BOOL)animated {
    [super viewDidAppear:animated];
}
*/
/*
- (void)viewWillDisappear:(BOOL)animated {
    [super viewWillDisappear:animated];
}
*/
/*
- (void)viewDidDisappear:(BOOL)animated {
    [super viewDidDisappear:animated];
}
*/


- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
    // Override to allow orientations other than the default portrait orientation.
    return YES;
}


#pragma mark -
#pragma mark Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    // Return the number of sections.
    return 1;
}


- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    // Return the number of rows in the section.
	if (loadingPhotos) {
//		NSLog(@"Array count: %i for %@", [[sharedGroupState groupPhotoList] count], section);
		return 1;
	} else {
		if (downloadCount = 0) {
			// If there are no photos in the group, alert the user and dismiss the popover
			NSString *groupAlertMessage = [[NSString alloc] initWithString:@"No photos were found in this group."];
			UIAlertView *groupAlert = [[UIAlertView alloc] initWithTitle:@"No Photos Found" message:groupAlertMessage delegate:self cancelButtonTitle:@"Dismiss" otherButtonTitles:nil];
			[groupAlert show];
			[groupAlert release];
			[groupAlertMessage release];
			if (popover != nil) {
				NSLog(@"Dismissing the popover .... now");
				[popover dismissPopoverAnimated:YES];
			} else {
				NSLog(@"Nothing to dismiss");
			}
			
		}
		else {
    return [groupPhotoList count];
		}
	}
	return 0;
}


// Customize the appearance of table view cells.
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"Entering cellForRowAtIndexPath");
    static NSString *CellIdentifier = @"Cell";
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier] autorelease];
//        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
    }
    
    // Configure the cell...
	
	if (loadingPhotos) {
		//Add activity monitor
		/* [spinner initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];
		[spinner setCenter:CGPointMake([self.view bounds].size.width/2, [self.view bounds].size.height/2)];
		[self.view addSubview:spinner];
		[spinner startAnimating];
		*/
		NSLog(@"waiting while loading photos for %@", [sharedGroupState groupID]);
		 cell.textLabel.text = @"Loading...";
		UIActivityIndicatorView *newActivity = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];
		[self setActivityView:newActivity];
		[newActivity release], newActivity = nil;
		[activityView retain];
		
		
		[activityView startAnimating];
		cell.accessoryView = activityView;
	} else {
		
		//hide the activity indicator
	
		NSLog(@"Configure the cell... %i", [groupPhotoList count]);
		NSUInteger row = [indexPath row];
		NSLog(@"Create the dictionary");
		NSDictionary *photoDetailDict = [[NSDictionary alloc] init];
		photoDetailDict = [groupPhotoList objectAtIndex:row];
		NSDictionary *photoThumbDict = [[NSDictionary alloc] init];
		photoThumbDict = [[sharedGroupState groupPhotoDataList] objectAtIndex:row];
		UIImage *thumbImage = [[UIImage alloc] initWithData:[photoThumbDict objectForKey:@"thumbData"]];
		cell.imageView.image = thumbImage;
		NSLog(@"Set the label");
		cell.textLabel.text = [photoDetailDict objectForKey:@"title"];
		cell.detailTextLabel.text = [photoDetailDict objectForKey:@"ownername"];
		NSLog(@"Owner Name = %@", [photoDetailDict objectForKey:@"ownername"]);
	}
	
	return cell;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
	return 80;
}

/*
// Override to support conditional editing of the table view.
- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath {
    // Return NO if you do not want the specified item to be editable.
    return YES;
}
*/


/*
// Override to support editing the table view.
- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {
    
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        // Delete the row from the data source
        [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:YES];
    }   
    else if (editingStyle == UITableViewCellEditingStyleInsert) {
        // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
    }   
}
*/


/*
// Override to support rearranging the table view.
- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath {
}
*/


/*
// Override to support conditional rearranging of the table view.
- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath {
    // Return NO if you do not want the item to be re-orderable.
    return YES;
}
*/


#pragma mark -
#pragma mark Table view delegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    // Navigation logic may go here. Create and push another view controller.
	/*
	 <#DetailViewController#> *detailViewController = [[<#DetailViewController#> alloc] initWithNibName:@"<#Nib name#>" bundle:nil];
     // ...
     // Pass the selected object to the new view controller.
	 [self.navigationController pushViewController:detailViewController animated:YES];
	 [detailViewController release];
	 */
	
	// Get the URL and data for the large image
	NSUInteger row = [indexPath row];
	[sharedGroupState setSelectedPhoto:row];
//	NSURL *photoURL = [[NSURL alloc] init];
	NSDictionary *tempDict = [groupPhotoList objectAtIndex:row];
	[self setPhotoURL:[context photoSourceURLFromDictionary:tempDict size:OFFlickrLargeSize]];
	NSLog(@"URL: %@", photoURL);
//	NSData *photoData = [[NSData alloc] init];
	[self setPhotoData:[NSData dataWithContentsOfURL:photoURL]];

	UIImage *tempFlickrPhoto = [[UIImage alloc] initWithData:photoData];
	
	CGSize tempPhotoImageSize = tempFlickrPhoto.size;
	
	CGFloat photoHeight = tempPhotoImageSize.height;
	CGFloat photoWidth = tempPhotoImageSize.width;
	
	NSLog(@"Height:  %f, Width:  %f", photoHeight, photoWidth);
	
	
	if (popover != nil) {
		NSLog(@"Dismissing the popover .... now");
		mainDisplayImage.image = tempFlickrPhoto;
		mainDisplayImage.contentMode = UIViewContentModeScaleAspectFit;
		
		if (mirrorState) {
			mirrorDisplayImage.image = tempFlickrPhoto;
			mirrorDisplayImage.contentMode = UIViewContentModeScaleAspectFit;
		}
		
		[sharedGroupState setPhotoSelected:1];
		[sharedGroupState setSelectedPhotoID:[[groupPhotoList objectAtIndex:row] objectForKey:@"id"]];
		[popover dismissPopoverAnimated:YES];
	} else {
		NSLog(@"Nothing to dismiss");
	}

	
}

-(void)setPopover:(UIPopoverController *)aPopover
{
	popover = aPopover;
}


-(void)setMainImage:(UIImageView *)aImage
{
	mainDisplayImage = aImage;
}

-(void)setMirrorImage:(UIImageView *)aImage
{
	mirrorDisplayImage = aImage;
}

-(void)setMirrorState:(BOOL)aMirrorState
{
	mirrorState = aMirrorState;
}


#pragma mark -
#pragma mark Memory management

- (void)didReceiveMemoryWarning {
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Relinquish ownership any cached data, images, etc that aren't in use.
}

- (void)viewDidUnload {
    // Relinquish ownership of anything that can be recreated in viewDidLoad or on demand.
    // For example: self.myOutlet = nil;
	self.flickrRequest = nil;
	self.context = nil;
	self.plistDictionary = nil;
	self.photoURL = nil;
	self.photoData = nil;
	self.activityView = nil;
}


- (void)dealloc {
//	[photoArray release];
//	[photoThumbArray release];
	[flickrRequest release];
	[context release];
	[plistDictionary release];
	[photoURL release];
	[photoData release];
    [activityView release];
	[super dealloc];
}


#pragma mark -
#pragma mark flickr Methods
-(void)flickrAPIRequest:(OFFlickrAPIRequest *)inRequest didCompleteWithResponse:(NSDictionary *)inResponseDictionary {
	
	NSLog(@"Sucessful response");
	if ([[inResponseDictionary valueForKeyPath:@"photos.photo"] objectAtIndex:0] != nil)
	{
	//	NSArray *photoCountArray = [[NSArray alloc] initWithArray:[inResponseDictionary valueForKeyPath:@"photos"]];
		//downloadCount = 10;
		//		downloadCount = [photoCountArray count];
		
		photoArray = [NSMutableArray array];
		photoThumbArray = 	[NSMutableArray array];
		int photoBatchCount = perPageAsInt;
/*		if (downloadCount < [sharedGroupState groupPhotoCountAsInt]) {
			NSLog(@"the number of photos downloaded was %i.  The number desired was %i.", downloadCount, [sharedGroupState groupPhotoCountAsInt]);
			[sharedGroupState setGroupPhotoCountAsInt:downloadCount];
		}
*/		
		
		NSLog(@"Going into loop with %i items", photoBatchCount);
		for (int i = 0; i < photoBatchCount; i++) {
			@try {
				NSDictionary *photoDict = [[inResponseDictionary valueForKeyPath:@"photos.photo"] objectAtIndex:i];
			}
			@catch (NSException * e) {
				i = photoBatchCount;
				break;
			}
			NSDictionary *photoDict = [[inResponseDictionary valueForKeyPath:@"photos.photo"] objectAtIndex:i];
			[photoArray addObject:photoDict];
			// Get the URL and data for the thumbnail (square, actually)
			[self setPhotoURL:[context photoSourceURLFromDictionary:photoDict size:OFFlickrSmallSquareSize]];
			NSLog(@"URL: %@", photoURL);
			[self setPhotoData:[NSData dataWithContentsOfURL:photoURL]];
			// Combine the URL and data into a dictionary object
			NSDictionary *photoThumbDict = [[NSDictionary alloc] initWithObjectsAndKeys:photoURL, @"thumbURL", photoData, @"thumbData", nil];
			[photoThumbArray addObject:photoThumbDict];
		}
	} else {
		NSLog(@"FAIL!");
	}
		
	loadingPhotos = NO;
	[activityView stopAnimating];
	[activityView release];

		
	//UIImage *tempFlickrPhoto = [[UIImage alloc] initWithData:photoData];
	//PPimageView.image = tempFlickrPhoto;
	//PPimageView.contentMode = UIViewContentModeScaleAspectFit;
	
	[self setGroupPhotoList:photoArray];
	
	
//	NSData *photoArrayBuffer = [NSKeyedArchiver archivedDataWithRootObject:photoArray];
	NSData *photoThumbArrayBuffer = [NSKeyedArchiver archivedDataWithRootObject:photoThumbArray];
//	NSLog(@"dump: %@", photoArrayBuffer);
//	[sharedGroupState setGroupPhotoList:[NSKeyedUnarchiver unarchiveObjectWithData:photoArrayBuffer]];

	//[sharedGroupState setGroupPhotoList:groupPhotoList];
	[sharedGroupState setGroupPhotoDataList:[NSKeyedUnarchiver unarchiveObjectWithData:photoThumbArrayBuffer]];
	
//	NSLog(@"The number of entries: %i", [[sharedGroupState groupPhotoList] count]);
	downloadCount = [groupPhotoList count];
	[self.tableView reloadData];
	
}

@end

